What is it?
-----------

ruby-ldapserver is a lightweight, pure Ruby skeleton for implementing LDAP
server applications. It is intended primarily for when you wish to build a
gateway from LDAP queries into some other protocol or database; it does not
attempt to be a full implementation of the standard LDAP data model itself
(although you could build one using this as a frontend)

The Connection class handles incoming connections, decodes ASN1-formatted
LDAP requests, and creates an Operation object for each request. The
Operation object further parses the ASN1 request and invokes methods which
you override to perform useful work. Responses and exceptions are converted
back into ASN1 and returned to the client.

Since it's written entirely in Ruby, it benefits from Ruby's threading
engine. You should ensure that your operations handler is thread-safe; for
example, you could allocate a pool of 10 Mysql handles, and borrow one from
the pool for each query that you wish to handle. The examples/ subdirectory
includes some running examples you can use as a starting point.

Libraries
---------

ASN1 encoding and decoding is done using the 'openssl' extension, which is
standard in the Ruby 1.8.2 base distribution. You should be able to run
`ruby -ropenssl -e puts` with no error.

However, I've found in the past that Linux machines don't always build the
openssl extension when compiling Ruby from source. With Red Hat 9, the
solution for me was, when building Ruby itself:

    # export CPPFLAGS="-I/usr/kerberos/include"
    # export LDFLAGS="-L/usr/kerberos/lib"
    # ./configure ...etc

If you want to run the test suite, then you'll need to install the ruby-ldap
client library.

Protocol implementation
-----------------------

ruby-ldapserver tries to be a pretty complete implementation of the message
decoding and encoding components of LDAP. However, it does not synthesise or
enforce the LDAP data model. For example, if you want to publish LDAP
entries to advertise your servers' capabilities in the root DSE (as required
by RFC 2251 section 3.4) this is your own responsibility. If you don't then
you won't be LDAP v3 compliant, but then again if you're just using LDAP as
a convenient query interface into some other database, you probably don't
care.

If your clients permit it, you can violate the LDAP specification further,
eliminating some of the gross design flaws of LDAP. For example, you can
ditch the LDAP idea that a Distinguished Name must consist of
attr=val,attr=val,attr=val... and use whatever is convenient as a primary
key (e.g. "val1,val2,val3" or "id,table_name"). The 'add' operation could
allocate DNs automatically from a sequence. There's no need for the data
duplication where an LDAP entry must contain the same attr=val pair which is
also the entry's RDN. Violations of the LDAP spec in this way are at your
own risk.

Status
------
This is an initial alpha release.

To-do list
----------
- handle and test generation of LDAP referrals properly
- test suite - abandon, concurrency, performance tests, error handling
- ldaps support
- extensible match filters
- extended operations
  RFC 2830 - TLS
  RFC 3062 - password modify
  RFC 2839 - whoami
  RFC 3909 - cancel

Contact
-------

Feel free E-mail me with patches and suggestions for this software. However,
please DON'T send me any general questions about LDAP, how it works, how to
apply LDAP in your particular situation, or questions about any other LDAP
software. The `ldap@umich.edu` mailing list is probably the correct place to
ask such questions. See:
<http://listserver.itd.umich.edu/cgi-bin/lyris.pl?enter=ldap>

Brian Candler <B.Candler@pobox.com>
